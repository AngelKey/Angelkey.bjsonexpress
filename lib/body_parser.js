// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var decode, decode_json_obj, getBody, hasBody, iced, json_bufferizer, parse_msgpack_body, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  hasBody = require('type-is').hasBody;

  getBody = require('raw-body');

  _ref = require('kbjo'), decode = _ref.decode, decode_json_obj = _ref.decode_json_obj;

  parse_msgpack_body = function(_arg, cb) {
    var buf, e, err, opts, params, req, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    req = _arg.req, res = _arg.res, opts = _arg.opts;
    params = {
      limit: opts.limit || '1000kb',
      length: req.headers['content-length'],
      encoding: opts.base64 ? 'base64' : 'binary'
    };
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/node-bjson-express/src/body_parser.iced"
        });
        getBody(req, params, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return buf = arguments[1];
            };
          })(),
          lineno: 12
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err === "undefined" || err === null) {
          try {
            req.body = decode({
              buf: buf,
              mpack: true
            });
          } catch (_error) {
            e = _error;
            err = e;
          }
        }
        return cb(err);
      };
    })(this));
  };

  exports.msgpack_parser = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return function(req, res, next) {
      var ct, err, go, stem, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      stem = "application/x-msgpack";
      ct = req.headers['content-type'];
      if (!hasBody(req)) {

      } else if (ct === stem) {
        go = true;
      } else if (ct === ("" + stem + "-64")) {
        opts.base64 = go = true;
      }
      (function(_this) {
        return (function(__iced_k) {
          if (go) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-bjson-express/src/body_parser.iced"
              });
              parse_msgpack_body({
                req: req,
                res: res,
                opts: opts
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 33
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return next(err);
        };
      })(this));
    };
  };

  exports.json_bufferizer = json_bufferizer = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return function(req, res, next) {
      if (req._body && req.body && typeof req.body === 'object') {
        req.body = decode_json_obj(req.body);
      }
      return next();
    };
  };

}).call(this);
